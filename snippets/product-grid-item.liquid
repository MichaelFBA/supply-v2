<!-- /snippets/product-grid-item.liquid -->
{% comment %} This snippet is used to showcase each product during the loop, 'for product in collection.products' in collection.liquid. A liquid variable (grid_item_width) is set just before the this snippet is included to change the size of the container.
Once the variable is set on a page, all future instances of this snippet will use that width. Overwrite the variable to adjust this. Example - assign grid_item_width = 'large--one-quarter medium--one-half' {% endcomment %} {% comment %} Set the default
grid_item_width if no variable is set {% endcomment %} {% unless grid_item_width %} {% assign grid_item_width = 'large--one-third medium--one-half' %} {% endunless %} {% comment %} Check if the product is on sale and set a variable to be used below. {%
endcomment %} {% assign on_sale = false %} {% if product.compare_at_price > product.price %} {% assign on_sale = true %} {% endif %} {% comment %} Check if the product is sold out and set a variable to be used below. {% endcomment %} {% assign sold_out
= true %} {% if product.available %} {% assign sold_out = false %} {% endif %}

<div class="{{ grid_item_width }}">

    {% comment %} Link to your product with the 'within: collection' filter for the link to be aware of the collection. This allows you to create collection-based navigation on the product page. Results of using 'within: collection': - Instead of a URL with
    /products/product-handle you would get /collections/collection-handle/products/product-handle For more info on navigation within a collection - http://docs.shopify.com/support/your-store/collections/how-to-navigate-within-a-collection {% endcomment
    %}
    <a href="{{ product.url | within: collection }}" class="block h100 cover" style="background-image:url({{ product.featured_image.src | img_url: 'master' }})" title="{{ product.featured_image.alt | escape }}">

        <div class="test-area">
            <div class="ball">
                <div class="vAlign">
                    <p class="h5 m-b-0">
                        {{ product.title }}
                        <br/>
                    </p>
                    <span>
                        {% comment %} You can show a leading 'from' or 'up to' by checking 'product.price_varies' if your variants have different prices. {% endcomment %} {% if on_sale %} {% if product.price_varies %} {% assign sale_price = product.price | money %} {{ 'products.product.on_sale_from_html'
                        | t: price: sale_price }} {% else %}
                        <strong>{{ 'products.product.on_sale' | t }}</strong>
                        {{ product.price | money }} {% endif %} {% else %} {% if product.price_varies %} {% assign price = product.price | money %} {{ 'products.general.from_text_html' | t: price: price }} {% else %} {{ product.price | money }} {% endif %} {% endif %} {% if
                        sold_out %}
                        <br>
                        <em>{{ 'products.product.sold_out' | t }}</em>
                        {% endif %} {% if on_sale %}
                        <span class="visually-hidden">{{ 'products.general.regular_price' | t }}</span>
                        <br>
                        <s>{{ product.compare_at_price | money }}</s>
                        {% endif %}
                    </span>
                </div>
            </div>
        </div>
    </a>

</div>

<script>
$(document).ready(function() {

    var balls = ui.select('.ball');
    balls.each(function(ball) {
      ball.set({
        values: {
          opacity: 1,
          y: 0,
          scale: 1
        }
      })
    })

    var $body = $('body');

    var grow = new ui.Tween({
        duration: 300,
        ease: 'anticipate',
        values: {
            scale: 1.2
        }
    })

    var springBack = new ui.Simulate({
      duration: 1000,
      values: {
          scale: {
              simulate: 'spring',
              start: 1.2,
              to: 1,
              spring: 600,
              stopSpeed: 0,
              friction: .3
          }
      }
    });

    $body.on('mouseover touchstart', '.ball', function(event) {
      event.stopPropagation();
      event.preventDefault();
      activeBall = ui.select(this);
      activeBall.start(grow);
    });

    $body.on('mouseleave touchend', '.ball', function(event) {
      event.stopPropagation();
      event.preventDefault();
      activeBall.start(springBack);
    });

})

</script>
