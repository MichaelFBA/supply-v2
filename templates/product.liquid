<!-- /templates/product.liquid -->
{% comment %}

  Rich snippets (itemscope, itemtype, etc.) for products are a theme requirement,
  and allow search engines to easily understand what the content is.

  For more information on these Scheme.org tags, visit:
    - http://schema.org/docs/gs.html

{% endcomment %}

<div itemscope itemtype="http://schema.org/Product">
    <meta itemprop="url" content="{{ shop.url }}{{ product.url }}">
    <meta itemprop="image" content="{{ product.featured_image.src | img_url: 'grande' }}">
    {% comment %}Get first variant, or deep linked one{% endcomment %}

    {% assign current_variant = product.selected_or_first_available_variant %}

    <div itemprop="offers" itemscope itemtype="http://schema.org/Offer">
        <meta itemprop="priceCurrency" content="{{ shop.currency }}">
        <link itemprop="availability" href="http://schema.org/{% if product.available %}InStock{% else %}OutOfStock{% endif %}">

        {% comment %}  ID addToCartForm is a selector for the ajax cart plugin {% endcomment %}
        <form action="/cart/add" method="post" class="h100" enctype="multipart/form-data" id="AddToCartForm" style="background: url({{ product.metafields.c_f.feature_image }}) no-repeat; ">

            <section id="MainProduct" class="h100">
                {% comment %} Product Name {% endcomment %}
                <div class="uiCircle productName"><h1 itemprop="name" class="vAlign">{{ product.title }}</h1></div>

                {% comment %} Product Price {% endcomment %}
                <div class="uiCircle productPrice">
                    <h4 id="ProductPrice" itemprop="price" class="vAlign">{{ current_variant.price | money }}</h4>
                    {% if product.compare_at_price_max > product.price %}
                        <p id="ComparePrice"><em>{{ 'products.product.compare_at' | t }} {{ current_variant.compare_at_price | money }}</p>
                    {% endif %}
                </div>

                {% comment %} Product Images {% endcomment %}
                {% include 'related-products' %}

                {% comment %} Product options {% endcomment %}
                {% for option in product.options %}
                    {% if option != 'Title' %}
                        <div class="uiCircle" data-toggle="modal" data-target="#{{option}}Modal"><h4 class="vAlign text-center">{{option}}</h4></div>
                    {% endif %}
                {% endfor %}

                {% comment %} Product Info {% endcomment %}
                <div class="uiCircle" data-toggle="modal" data-target="#InfoModal"><h4 class="vAlign text-center">Info</h4></div>

                {% comment %} Suppliers {% endcomment %}
                <div class="uiCircle" data-toggle="modal" data-target="#SupplierModal"><h4 class="vAlign text-center">Suppliers</h4></div>

                {% comment %} Product Add to Cart {% endcomment %}
                <button type="submit" name="add" id="AddToCart" class="uiCircle btn--secondary p-a-0 no-outline"><h4 id="AddToCartText" class="tight m-b-0 text-center">{{ 'products.product.add_to_cart' | t }}</h4></button>
            </section>

            <select name="id" id="productSelect" class="product-single__variants">
                {% for variant in product.variants %}
                    {% if variant.available %}
                        {% comment %}Note: if you use option_selection.js, your <select> tag will be overwritten, meaning what you have inside <option> will not reflect what you coded below.{% endcomment %}
                        <option {% if variant == product.selected_or_first_available_variant %} selected="selected" {% endif %} data-sku="{{ variant.sku }}" value="{{ variant.id }}">{{ variant.title }} - {{ variant.price | money_with_currency }}</option>
                    {% else %}
                        <option disabled="disabled">
                            {{ variant.title }} - {{ 'products.product.sold_out' | t }}
                        </option>
                    {% endif %}
                {% endfor %}
            </select>

            <span class="visually-hidden">{{ 'products.general.regular_price' | t }}</span>
            <span class="visually-hidden">{{ 'products.general.sale_price' | t }}</span>
            <input type="number" id="Quantity" name="quantity" value="1" min="1" class="quantity-selector visually-hidden">
        </form>
    </div>

      <div class="visually-hidden" itemprop="description">
        {{ product.description }}
      </div>

      {% comment %}
        If the user is on a collection product page (ie with /collections/collection-handle/products/product-handle)
        in the URL, we can show next/previous links to other products in the collection.
      {% endcomment %}

      {% comment %}
      Uncomment if you next / previous product

      {% if collection %}
        {% if collection.previous_product or collection.next_product %}
          <p>
            {% if collection.previous_product %}
              <span class="left">
                {{ 'products.general.previous_product_html' | t | link_to: collection.previous_product }}
              </span>
            {% endif %}
            {% if collection.next_product %}
              <span class="right">
                {{ 'products.general.next_product_html' | t | link_to: collection.next_product }}
              </span>
            {% endif %}
          </p>
        {% endif %}
      {% endif %}
      {% endcomment %}
</div>
<section class="container-fluid m-y product-image-container">
    <div class="row">
        {% for image in product.images %}
            <div class="col-xs-6 col-sm-3 p-a-0">
                <img class="product-images img-responsive" data-img="{{ image.src | img_url: '2048x2048', format: 'pjpg' }}" src="{{ image.src | img_url: '1024x1024' }}" alt="{{ product.title }}"/>
            </div>
        {% endfor %}
    </div>
</section>



{% include 'about-small' %}

{% comment %}
  To take advantage of a callback on the select dropdown, add option_selection.js
  and customize the JS in timber.productPage as needed.

  Currently, timber.productPage does the following:
    - Hides your <select> tag from above
    - Breaks out the product variants into separate product options, if more than one exists
    - Generates a <select> tag for each product option
    - Enables/disables elements based on variant availability

  Callback notes:
    - Keep the callback available to the global scope (window.selectCallback) so that advanced
      addons can override it.
      * E.g. multiple currencies http://docs.shopify.com/manual/configuration/store-customization/currencies-and-translations/currencies/how-to-toggle-between-two-currencies
{% endcomment %}
{{ 'option_selection.js' | shopify_asset_url | script_tag }}
<script>

    var selectCallback = function(variant, selector) {
        timber.productPage({
            money_format: "{{ shop.money_format }}",
            variant: variant,
            selector: selector
        });
    };

    jQuery(function($) {
        new Shopify.OptionSelectors('productSelect', {
            product: {{ product | json }},
            onVariantSelected: selectCallback,
            enableHistoryState: true
        });

        var product = {{ product | json }};
        console.log(product)

        // Add label if only one product option and it isn't 'Title'. Could be 'Size'.
        {% if product.options.size == 1 and product.options.first != 'Title' %}
            $('.selector-wrapper:eq(0)').prepend('<label for="productSelect-option-0">{{ product.options.first | escape }}</label>');
        {% endif %}

        // Hide selectors if we only have 1 variant and its title contains 'Default'.
        {% if product.variants.size == 1 and product.variants.first.title contains 'Default' %}
            $('.selector-wrapper').hide();
        {% endif %}

        //Move selects into modals
        for (var i = 0; i < product.options.length; i++) {
            if (product.options[i] == "Size" || product.options[i] == "size") {
                $('#productSelect-option-' + i).appendTo('#SizeModal .modal-body #select').addClass('w100');
            }
            if (product.options[i] == "Colour" || product.options[i] == "colour") {
                $('#productSelect-option-' + i).appendTo('#ColourModal .modal-body #select').addClass('w100');
            }
        }
    });

    //Product images
    var $body = $('body');
    var $highlightedProduct = $body.find('#product-image-overlay');
    $('.product-images').on('click', function(){
        var largeImageUrl = $(this).data('img');
        var smallImageUrl = $(this).attr('src');
        $body.addClass('featured')
        $highlightedProduct.append('<img class="blurred-image" src="'+ smallImageUrl +'" />')
        $highlightedProduct.append('<img src="'+ largeImageUrl +'" />')
        $highlightedProduct.imagesLoaded()
            .done( function( instance ) {
                $highlightedProduct.find('.blurred-image').remove();
            })
    })
    $highlightedProduct.on('click', function(){
        $(this).empty()
        $body.removeClass('featured')
    });

    //Product Balls
    $(document).ready(function(){
        //set first image
        var product = {{ product | json }};

        //Product Images
        $('.productImage').on('click', function(){
            var productUrl = $(this).data('href');
            window.location.href = productUrl;
        })

        //Create Interactive
        createProductInteraction();

        //On resize recreate the interactive (only if width changed);
        var id;
        var w = $( window ).width();
        $(window).resize(function() {
            if ($(window).width()==w) return;
            w = $(window).width();
            clearTimeout(id);
            id = setTimeout(doneResizing, 500);

        });
        function doneResizing(){
            $( "#MainProduct" ).children().not( ".uiCircle" ).remove();
            createProductInteraction();
        }
    })

    function createProductInteraction(){
        var isMobile = window.matchMedia("only screen and (max-width: 760px)");
        var width = $('#MainProduct').width(),
            height = $('body').height(),
            padding = 5, // separation between nodes
            maxRadius = 30;
        var pos = {x: width - 200, y: height / 2}
        var nodes = [];
        var circleRef = d3.selectAll(".uiCircle")[0];
        var n = d3.selectAll(".uiCircle")[0].length, // total number of nodes
            m = 1; // number of distinct clusters
        var xPos = d3.scale.ordinal()
                .domain(d3.range(m))
                .rangePoints([width, width], 1);
        var x = d3.scale.linear()
                .domain([0, width])
                .range([0, width]);
        var y = d3.scale.linear()
                .domain([0, height])
                .range([0, height]);

        if(isMobile.matches){
            var diameter = $(circleRef[0]).width();
            pos = {x: width - diameter, y: height - diameter };
        }

        nodes = d3.range(n).map(function(key) {
            var i = Math.floor(Math.random() * m),
                v = (i + 1) / m * -Math.log(Math.random()),
                r = $(circleRef[key]).width() / 2;
            return {
                radius: r,
                cx: pos.x,
                cy: pos.y
            };
        });

        var root = nodes[0];
        root.fixed = true;
        root.x = pos.x;
        root.y = pos.y;

        var force = d3.layout.force()
            .nodes(nodes)
            .size([width, height])
            .gravity(0)
            .charge(0)
            .on("tick", tick)
            .start();

        var $body = d3.select("#MainProduct")
            .append("div")
            .attr('style', function(d) {
              return 'width: ' + width + 'px; height: ' + height + 'px;';
            });

        var $div = d3.selectAll(".uiCircle")
            .data(nodes)
            .call(force.drag)
            .on("mouseover", function(d){
				d3.select(this)
					.transition()
					.duration(300)
					.ease('elastic')
					.style("transform", "scale(1.05)")
			})
            .on("mouseleave", function(d){
				d3.select(this)
					.transition()
					.duration(1000)
					.ease('elastic')
					.style("transform", "scale(1)")
			})

        function tick(e) {
            $div
                .each(gravity(.2 * e.alpha))
                .each(collide(.5))
                .style('left', function(d) {
                    d.x = x(Math.max(d.radius, Math.min(width - d.radius, d.x)))
                    return d.x  + 'px';
                })
                .style('top', function(d) {
                    d.y=y(Math.max(d.radius, Math.min(height - d.radius, d.y)));
                    return d.y + "px"
                });
        }

        // Move nodes toward cluster focus.
        function gravity(alpha) {
            return function(d) {
                d.y += (root.y - d.y) * alpha;
                d.x += (root.x - d.x) * alpha;
            };
        }

        // Resolve collisions between nodes.
        function collide(alpha) {
            var quadtree = d3.geom.quadtree(nodes);
            return function(d) {
                var r = d.radius + maxRadius + padding,
                    nx1 = d.x - r,
                    nx2 = d.x + r,
                    ny1 = d.y - r,
                    ny2 = d.y + r;
                quadtree.visit(function(quad, x1, y1, x2, y2) {
                    if (quad.point && (quad.point !== d)) {
                        var x = d.x - quad.point.x,
                            y = d.y - quad.point.y,
                            l = Math.sqrt(x * x + y * y),
                            r = d.radius + quad.point.radius + padding;
                        if (l < r) {
                            l = (l - r) / l * alpha;
                            d.x -= x *= l;
                            d.y -= y *= l;
                            quad.point.x += x;
                            quad.point.y += y;
                        }
                    }
                    return x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1;
                });
            };
        }
    }
</script>
